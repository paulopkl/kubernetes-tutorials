name: "Terraform"

on:
  push:
    branches:
      - main
    paths:
      - eks-app-mesh/**

  pull_request:
    paths:
      - eks-app-mesh/**

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    # Use the Bash Shell regardless whether the Github Actions runner is ubuntu-latest, macos-latest
    defaults:
      run:
        working-directory: aws
        shell: bash
    steps:
      # Checkout Repository
      - name: Checkout
        uses: actions/checkout@v2

      # Install Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Terraform format
      - name: Terraform format
        id: fmt
        run: terraform fmt -check
      
      - name: Terraform Init
        id: init
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}

      # Github Scripts
      - name: Github Scripts
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Plan \`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${ process.env.PLAN }\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # Verify if terraform plan return error
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      # Verify if it's branch 'prod' and it is a 'push' then execute terraform apply
      - name: Terraform Apply
        if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
        run: terraform apply -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
